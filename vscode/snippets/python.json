{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "mutation": {
    "prefix": "mtn",
    "description": "GraphQL Mutation",
    "body": [
      "class $1Input(graphene.InputObjectType):",
      "    $2",
      "",
      "class $1Mutation(graphene.Mutation):",
      "    class Arguments:",
      "        input = graphene.NonNull($1Input)",
      "",
      "    $3",
      "    errors = graphene.Field(PayloadError)",
      "",
      "    def mutate(cls, info: ResolveInfo, input: $1Input):",
      "",
      "        return $1Mutation()"
    ]
  },
  "non-null field": {
    "prefix": "nn",
    "description": "non-null graphene field",
    "body": "$1 = graphene.NonNull(graphene.$2)"
  },
  "pytest test": {
    "prefix": "tst",
    "description": "pytest test",
    "body": [
      "import pytest",
      "from monarch.lib import get_logger",
      "",
      "pytestmark = pytest.mark.usefixtures(\"db\")",
      "logger = get_logger(__name__)",
      "",
      "$1"
    ]
  },
  "gql test imports": {
    "prefix": "tgql",
    "description": "imports for gql tests",
    "body": "from monarch.base.testing.graphql import assert_response_has_expected_errors, assert_response_no_errors, get_response_data, query",
  },
  "lambda func": {
    "prefix": "lam",
    "description": "lambda function",
    "body": "lambda $1: $1"
  },
  "logger": {
    "prefix": "lgr",
    "description": "import logger",
    "body": [
      "from monarch.lib import get_logger",
      "",
      "logger = get_logger(__name__)"
    ]
  }
}
